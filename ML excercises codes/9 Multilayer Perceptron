{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copia de Copia de Exerc 9 - Multilayer Perceptron","version":"0.3.2","provenance":[{"file_id":"1IWaUbA7MXoniqSGYwTm2xK7m7lnMfc74","timestamp":1543433254224},{"file_id":"1CmIrZaSlA1u6axVKGmKOEagU9wLkW5P7","timestamp":1543431982343}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"metadata":{"id":"-WYztFuRbfet","colab_type":"text"},"cell_type":"markdown","source":["# Notebook 9 - Redes Neuronales en Tensorflow.\n"]},{"metadata":{"id":"V-N5RWEE-xpO","colab_type":"text"},"cell_type":"markdown","source":["## 1. Red Neuronal Multicapa para MNIST.\n","\n","Hoy trabajaremos nuevamente sobre el conocidísimo dataset MNIST. Este dataset contiene 20.000 muestras de imagenes de 28x28 píxeles (784 píxeles), que nosotros trataremos como variables independientes. Es decir, trabajaremos con un dataset de dimensiones 20.000x784. Cada una de las variables de entrada contiene un valor entero que varía de 0 a 255 indicando la intensidad en escala de grises del pixel correspondiente.\n","\n","El Viernes pasado conseguimos obtener aproximadamente un 50% de precisión con un clasificador semi-supervisado (50 puntos) y cerca de un 90% de precisión con un clasificador logístico (entrenado con todos los puntos). ¿Podemos conseguir una mejor precisión utilizando una Red Neuronal Multicapa? ¡Vamos a verlo!\n","\n","---\n","\n","**Tu tarea:** Vamos a utilizar las funcionalidades de Keras para crear y entrenar a nuestro clasificador. En este caso, deberás de utilizar la documentación de Keras para ver cómo conseguir esto. Te puede interesar ver cómo te pueden ayudar funciones como ***tf.keras.layers.Dense(...)***, ***tf.keras.layers.Sequential(...)*** o *** model.fit()***.\n","\n","1. Recuerda que para comenzar deberás de preprocesar correctamente tus datos: escalar las variables, convertir etiquetas a **one-hot label**, etc.\n","2. Una vez tengas tus datos, genérate tus datos de entrenamiento y de validación.\n","3. Construye tu modelo con Keras. En este punto tienes libertad para elegir cuántas capas utilizar, cuántas neuronas, qué tipo de función de activación, etc. Cada decisión que tomes de la arquitectura debe de estar justificada. Utiliza Google para apoyar tus decisiones.\n","4. Entrena tu modelo con Keras. En este punto tienes libertad para elegir qué optimizador usar, qué learning-rate, qué batch_size, epochs, etc. Cada decisión que tomes de la arquitectura debe de estar justificada. Utiliza Google para apoyar tus decisiones.\n","5. Cuando entrenes a tu modelo, para cada *epoch* muestra métricas de *MSE* y *Accuracy*.\n","6. Una vez tengas a tu modelo entrenado, ¿Qué accuracy has obtenido? Selecciona algunos ejemplos que NO hayan sido clasificados correctamente por tu clasificador y visualizalos. Muestra igualmente en el título de cada gráfica la predicción generada por tu modelo. ¿Tienen sentido esos fallos?.\n","\n"]},{"metadata":{"id":"-kAbIIRDbq_J","colab_type":"code","outputId":"e9839a58-207e-47b7-ae74-e21ad2044149","executionInfo":{"status":"ok","timestamp":1543507806785,"user_tz":0,"elapsed":1691,"user":{"displayName":"Alberto Xirzag","photoUrl":"https://lh5.googleusercontent.com/-Wb_I_y4NJ-8/AAAAAAAAAAI/AAAAAAAAADo/qvmLmJUcT1A/s64/photo.jpg","userId":"02782791740644802739"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["import numpy as np\n","import scipy as sc\n","import sklearn as sk\n","import pandas  as pd\n","import seaborn as sb\n","import matplotlib.pyplot as plt\n","\n","import tensorflow as tf\n","import tensorflow.keras\n","from keras import backend as K\n","from sklearn import preprocessing\n","\n","## COMIENZA AQUÍ TU CÓDIGO ##\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"metadata":{"id":"QuWwfDwqyyDl","colab_type":"code","outputId":"3f8248c7-68eb-4161-8954-84c43adac309","executionInfo":{"status":"ok","timestamp":1543507809764,"user_tz":0,"elapsed":4658,"user":{"displayName":"Alberto Xirzag","photoUrl":"https://lh5.googleusercontent.com/-Wb_I_y4NJ-8/AAAAAAAAAAI/AAAAAAAAADo/qvmLmJUcT1A/s64/photo.jpg","userId":"02782791740644802739"}},"colab":{"base_uri":"https://localhost:8080/","height":105}},"cell_type":"code","source":["from keras.utils.np_utils import to_categorical\n","from sklearn.preprocessing import StandardScaler\n","\n","mnist = pd.read_csv('sample_data/mnist_train_small.csv', header=None)\n","\n","print(mnist.shape)\n","\n","X = np.matrix(mnist.iloc[:,1:785])\n","Y = np.array(mnist.iloc[:,0]).reshape(20000, 1)\n","\n","del mnist\n","\n","print(X.shape, Y.shape)\n","\n","scaler = StandardScaler(with_mean=True, with_std=True)\n","X = scaler.fit_transform(X)\n","# X = X / 255\n","Y = to_categorical(Y, num_classes=10)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["(20000, 785)\n","(20000, 784) (20000, 1)\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:475: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n","  warnings.warn(msg, DataConversionWarning)\n"],"name":"stderr"}]},{"metadata":{"id":"FNQ0TRwxzarT","colab_type":"code","outputId":"daee4e41-516d-4ec2-aaa8-99c4f99e86f6","executionInfo":{"status":"ok","timestamp":1543507809766,"user_tz":0,"elapsed":4651,"user":{"displayName":"Alberto Xirzag","photoUrl":"https://lh5.googleusercontent.com/-Wb_I_y4NJ-8/AAAAAAAAAAI/AAAAAAAAADo/qvmLmJUcT1A/s64/photo.jpg","userId":"02782791740644802739"}},"colab":{"base_uri":"https://localhost:8080/","height":355}},"cell_type":"code","source":["\n","img0 = X[0] # Seleccionamos la primera imagen.\n","print(img0.shape)\n","\n","# Redimensionamos y visualizamos la imagen.\n","plt.matshow(img0.reshape(28, 28))\n","plt.title(\"Primera imagen ^^\")\n","plt.colorbar()\n","plt.show()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["(784,)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\nRK5CYII=\n","text/plain":["<matplotlib.figure.Figure at 0x7fbfabe7ab38>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"um7UgpIz0Bkg","colab_type":"code","outputId":"d91e37dc-13b9-4f6f-a705-3e8c9f5154d7","executionInfo":{"status":"ok","timestamp":1543508534817,"user_tz":0,"elapsed":43298,"user":{"displayName":"Alberto Xirzag","photoUrl":"https://lh5.googleusercontent.com/-Wb_I_y4NJ-8/AAAAAAAAAAI/AAAAAAAAADo/qvmLmJUcT1A/s64/photo.jpg","userId":"02782791740644802739"}},"colab":{"base_uri":"https://localhost:8080/","height":751}},"cell_type":"code","source":["from keras.layers import Dense, Activation\n","from keras.models import Sequential\n","from keras import optimizers\n","from sklearn.model_selection import train_test_split\n","\n","x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=.3)\n","\n","model = Sequential()\n","\n","model.add(Dense(units=512, activation='relu', input_shape=(784,)))\n","model.add(Dense(units=128, activation='relu'))\n","model.add(Dense(units=10, activation='softmax'))\n","\n","sgd = optimizers.SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)\n","\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=sgd,\n","              metrics=['mse', 'accuracy'])\n","\n","model.fit(x_train, y_train, epochs=20, batch_size=32, validation_split=.15)\n","\n","loss_and_metrics = model.evaluate(x_test, y_test, batch_size=128)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Train on 11900 samples, validate on 2100 samples\n","Epoch 1/20\n","11900/11900 [==============================] - 2s 197us/step - loss: 0.4274 - mean_squared_error: 0.0182 - acc: 0.8752 - val_loss: 0.2763 - val_mean_squared_error: 0.0107 - val_acc: 0.9295\n","Epoch 2/20\n","11900/11900 [==============================] - 2s 173us/step - loss: 0.1394 - mean_squared_error: 0.0062 - acc: 0.9605 - val_loss: 0.2526 - val_mean_squared_error: 0.0096 - val_acc: 0.9419\n","Epoch 3/20\n","11900/11900 [==============================] - 2s 173us/step - loss: 0.0732 - mean_squared_error: 0.0029 - acc: 0.9821 - val_loss: 0.2491 - val_mean_squared_error: 0.0084 - val_acc: 0.9481\n","Epoch 4/20\n","11900/11900 [==============================] - 2s 174us/step - loss: 0.0361 - mean_squared_error: 0.0013 - acc: 0.9928 - val_loss: 0.2339 - val_mean_squared_error: 0.0080 - val_acc: 0.9514\n","Epoch 5/20\n","11900/11900 [==============================] - 2s 174us/step - loss: 0.0202 - mean_squared_error: 5.3703e-04 - acc: 0.9976 - val_loss: 0.2317 - val_mean_squared_error: 0.0079 - val_acc: 0.9495\n","Epoch 6/20\n","11900/11900 [==============================] - 2s 178us/step - loss: 0.0129 - mean_squared_error: 2.0228e-04 - acc: 0.9994 - val_loss: 0.2315 - val_mean_squared_error: 0.0076 - val_acc: 0.9510\n","Epoch 7/20\n","11900/11900 [==============================] - 2s 181us/step - loss: 0.0106 - mean_squared_error: 1.2865e-04 - acc: 0.9996 - val_loss: 0.2350 - val_mean_squared_error: 0.0076 - val_acc: 0.9524\n","Epoch 8/20\n","11900/11900 [==============================] - 2s 178us/step - loss: 0.0095 - mean_squared_error: 1.0590e-04 - acc: 0.9996 - val_loss: 0.2386 - val_mean_squared_error: 0.0076 - val_acc: 0.9524\n","Epoch 9/20\n","11900/11900 [==============================] - 2s 175us/step - loss: 0.0089 - mean_squared_error: 9.5267e-05 - acc: 0.9996 - val_loss: 0.2415 - val_mean_squared_error: 0.0076 - val_acc: 0.9519\n","Epoch 10/20\n","11900/11900 [==============================] - 2s 176us/step - loss: 0.0085 - mean_squared_error: 9.0969e-05 - acc: 0.9996 - val_loss: 0.2438 - val_mean_squared_error: 0.0076 - val_acc: 0.9505\n","Epoch 11/20\n","11900/11900 [==============================] - 2s 176us/step - loss: 0.0083 - mean_squared_error: 8.9051e-05 - acc: 0.9996 - val_loss: 0.2459 - val_mean_squared_error: 0.0077 - val_acc: 0.9529\n","Epoch 12/20\n","11900/11900 [==============================] - 2s 177us/step - loss: 0.0081 - mean_squared_error: 8.7626e-05 - acc: 0.9996 - val_loss: 0.2477 - val_mean_squared_error: 0.0077 - val_acc: 0.9538\n","Epoch 13/20\n","11900/11900 [==============================] - 2s 178us/step - loss: 0.0079 - mean_squared_error: 8.6855e-05 - acc: 0.9996 - val_loss: 0.2494 - val_mean_squared_error: 0.0077 - val_acc: 0.9524\n","Epoch 14/20\n","11900/11900 [==============================] - 2s 177us/step - loss: 0.0078 - mean_squared_error: 8.6162e-05 - acc: 0.9996 - val_loss: 0.2512 - val_mean_squared_error: 0.0077 - val_acc: 0.9533\n","Epoch 15/20\n","11900/11900 [==============================] - 2s 175us/step - loss: 0.0077 - mean_squared_error: 8.5680e-05 - acc: 0.9996 - val_loss: 0.2532 - val_mean_squared_error: 0.0077 - val_acc: 0.9529\n","Epoch 16/20\n","11900/11900 [==============================] - 2s 175us/step - loss: 0.0076 - mean_squared_error: 8.5420e-05 - acc: 0.9996 - val_loss: 0.2542 - val_mean_squared_error: 0.0077 - val_acc: 0.9529\n","Epoch 17/20\n","11900/11900 [==============================] - 2s 174us/step - loss: 0.0076 - mean_squared_error: 8.5077e-05 - acc: 0.9996 - val_loss: 0.2553 - val_mean_squared_error: 0.0077 - val_acc: 0.9519\n","Epoch 18/20\n","11900/11900 [==============================] - 2s 174us/step - loss: 0.0075 - mean_squared_error: 8.4895e-05 - acc: 0.9996 - val_loss: 0.2565 - val_mean_squared_error: 0.0077 - val_acc: 0.9529\n","Epoch 19/20\n","11900/11900 [==============================] - 2s 174us/step - loss: 0.0074 - mean_squared_error: 8.4516e-05 - acc: 0.9996 - val_loss: 0.2572 - val_mean_squared_error: 0.0077 - val_acc: 0.9519\n","Epoch 20/20\n","11900/11900 [==============================] - 2s 175us/step - loss: 0.0074 - mean_squared_error: 8.4556e-05 - acc: 0.9996 - val_loss: 0.2578 - val_mean_squared_error: 0.0077 - val_acc: 0.9524\n","6000/6000 [==============================] - 0s 30us/step\n"],"name":"stdout"}]},{"metadata":{"id":"GiV5FsjKBd4j","colab_type":"code","outputId":"57d8c865-5a53-4989-e9ff-88463e9991ef","executionInfo":{"status":"ok","timestamp":1543508692444,"user_tz":0,"elapsed":578,"user":{"displayName":"Alberto Xirzag","photoUrl":"https://lh5.googleusercontent.com/-Wb_I_y4NJ-8/AAAAAAAAAAI/AAAAAAAAADo/qvmLmJUcT1A/s64/photo.jpg","userId":"02782791740644802739"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["loss_and_metrics"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0.2328162823120753, 0.00723367927223444, 0.9555000004768371]"]},"metadata":{"tags":[]},"execution_count":22}]},{"metadata":{"id":"PMVz-gDT_CDQ","colab_type":"code","colab":{}},"cell_type":"code","source":["yp = model.predict(x_test)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"5r2Xq3p__meK","colab_type":"code","colab":{}},"cell_type":"code","source":["mask = np.argmax(yp, axis=1) != np.argmax(y_test, axis=1)\n","x_bad = x_test[mask]\n","y_bad = y_test[mask]\n","yp_bad = yp[mask]"],"execution_count":0,"outputs":[]},{"metadata":{"id":"seoIM_s7D-b3","colab_type":"code","outputId":"a4a5bca3-dda8-4cfb-ecec-74d8986229c5","executionInfo":{"status":"ok","timestamp":1543509115668,"user_tz":0,"elapsed":105111,"user":{"displayName":"Alberto Xirzag","photoUrl":"https://lh5.googleusercontent.com/-Wb_I_y4NJ-8/AAAAAAAAAAI/AAAAAAAAADo/qvmLmJUcT1A/s64/photo.jpg","userId":"02782791740644802739"}},"colab":{"base_uri":"https://localhost:8080/","height":163517,"output_embedded_package_id":"1CF_rYgf2hiAr0ufzeFsAuwc2Z5mAmhvX"}},"cell_type":"code","source":["for c in np.random.choice(len(x_bad), 500):\n","  img = scaler.inverse_transform(x_bad[c])\n","  plt.matshow(img.reshape(28, 28))\n","  plt.title('Es un ' + str(np.argmax(y_bad[c])) + ' pero predice ' + str(np.argmax(yp_bad[c])))\n","  plt.colorbar()\n","  plt.show()\n","  \n","  #françois cholet"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]}]}